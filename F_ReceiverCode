//NEW FINAL Receiver CODE
#include <Servo.h>    //the library which helps us to control the servo motor
#include <SPI.h>      //the communication interface with the modem
#include "RF24.h"     //the library which helps us to control the radio modem
#include <nRF24L01.h>
#include "PCA9685.h"
#include <Wire.h>
#include "I2Cdev.h"

RF24 radio(9,10);
const uint64_t pipe = 0xE8E8F0F0E1LL; //the address of the modem,that will receive data from the Arduino.
float msg[5];


ServoDriver servo;


void setup()
{
  // join I2C bus (I2Cdev library doesn't do this automatically)
  Wire.begin();
  Serial.begin(9600);
  
  servo.init(0x7f);
  

  // uncomment this line if you need to use a special servo
  // servo.setServoPulseRange(600,2400,180);
  Serial.begin(9600);
  
  radio.begin();                    //it activates the modem.
  radio.setDataRate( RF24_250KBPS );
  radio.openReadingPipe(1, pipe);   //determines the address of our modem which receive data.
  radio.startListening();   //enable receiving data via modem
  radio.setPALevel(RF24_PA_MAX);       //You can set this as minimum or maximum depending on the distance between the transmitter and receiver.
  radio.setChannel(90);
}

void loop()
{
  radio.read(&msg, sizeof(msg));

  int angle[6];
  int sensor_value[6];
  sensor_value[0] = analogRead(msg[4]);
  sensor_value[1] = analogRead(msg[3]);
  sensor_value[2] = analogRead(msg[2]);
  sensor_value[3] = analogRead(msg[1]);
  sensor_value[4] = analogRead(msg[0]);

  angle[0] = (float)sensor_value[0] * 300 / 1023;
  angle[1] = (float)sensor_value[1] * 300 / 1023;
  angle[2] = (float)sensor_value[2] * 300 / 1023;
  angle[3] = (float)sensor_value[3] * 300 / 1023;
  Serial.println(angle[0]);

  servo.setAngle(12, map(angle[0], 0, 300, 0, 170));
  servo.setAngle(13, map(angle[1], 0, 300, 0, 180));
  servo.setAngle(14, map(angle[2], 0, 300, 20, 180));
  servo.setAngle(15, map(angle[3], 0, 300, 20, 160));
  delay(15);


}
